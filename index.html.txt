<!DOCTYPE html>
<html lang="en" class="scroll-smooth">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DANIEL SIMON | Motion Designer</title>

    <!-- Google Fonts: Sora -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sora:wght@300;400;600;700&display=swap" rel="stylesheet">

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Custom Styles -->
    <style>
        /* Using a style block for custom styles that complement Tailwind */
        :root {
            --accent-color: #3A78F2;
        }

        body {
            font-family: 'Sora', sans-serif;
            background-color: #F5F3EF; /* Elias Studio off-white background */
            color: #1A1A1A; /* Elias Studio dark text */
            cursor: none; /* Hide the default system cursor */
            position: relative; /* Needed for z-index stacking of the noise pseudo-element */
        }
        
        /* Hide default text selection highlight */
        ::selection { background: transparent; }
        ::-moz-selection { background: transparent; }


        /* Noisy background effect */
        body::after {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            background-image: url('https://raw.githubusercontent.com/taimoorshahzada/Film-Grain-Noise-Effect-on-Background-in-Website-using-Pure-CSS/refs/heads/main/noise.gif');
            opacity: 0.06;
            z-index: 0;
            transform: translateZ(0);
        }

        /* Scramble text styling */
        .scramble-text .dud {
            color: var(--accent-color);
            transition: filter 0.3s ease, color 0.4s ease; /* Smooth transition for the blur and color */
        }
        .scramble-text .dud.blurred {
            filter: blur(2px);
        }

        /* Custom cursor styles */
        .custom-cursor {
            position: fixed;
            left: 0;
            top: 0;
            pointer-events: none;
            z-index: 9999;
            transform: translate(-50%, -50%);
            width: 80px;
            height: 80px;
            border: 1px solid rgba(26, 26, 26, 0.1); /* Lighter stroke */
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(2px); /* Restored blur effect */
            -webkit-backdrop-filter: blur(2px);
            transition: transform 0.3s cubic-bezier(0.23, 1, 0.32, 1);
        }
        
        .cursor-accent {
            width: 12px; /* Slightly bigger */
            height: 12px;
            background-color: white; /* Base for difference mode */
            mix-blend-mode: difference;
        }

        .custom-cursor.is-hovered {
            transform: translate(-50%, -50%) scale(1.1); /* Slight scale on hover */
        }
        
        /* Fade-in animation for scroll effects */
        .fade-in-section {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        }

        .fade-in-section.is-visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* Fullscreen video overlay with scale/fade animation */
        #showreel-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 100;
            pointer-events: none;
            opacity: 0;
            transform: scale(0.8);
            transition: transform 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.4s ease;
        }

        #showreel-overlay.is-visible {
            pointer-events: auto;
            opacity: 1;
            transform: scale(1);
        }

        .video-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .video-container iframe {
            width: 100%;
            height: 100%;
        }

        /* Unmute and Close button styles */
        .video-control-btn {
            position: absolute;
            z-index: 110;
            padding: 0.75rem 1.5rem;
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 9999px;
            color: white;
            font-weight: 600;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
            text-transform: uppercase;
            transition: color 0.4s cubic-bezier(0.23, 1, 0.32, 1);
            overflow: hidden;
            backdrop-filter: blur(4px);
            -webkit-backdrop-filter: blur(4px);
        }

        .video-control-btn::before {
            content: '';
            position: absolute;
            z-index: -1;
            top: 50%;
            left: 50%;
            width: 100%;
            height: 100%;
            background-color: white;
            border-radius: 50%;
            transform: translate(-50%, -50%) scale(0);
            transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1);
        }

        .video-control-btn:hover {
            color: #1A1A1A;
        }

        .video-control-btn:hover::before {
            transform: translate(-50%, -50%) scale(1.5);
        }

        #unmute-btn {
            top: 1rem;
            left: 50%;
            transform: translateX(-50%);
        }
        
        #close-btn {
            top: 1rem;
            right: 1rem;
        }

        /* Play button styles */
        #play-button-container {
            transition: transform 0.2s ease-out;
        }
        .play-button-wrapper {
            position: relative;
            width: 120px; /* Increased size to accommodate text */
            height: 120px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }
        .play-button-icon {
             transition: transform 0.3s ease;
        }
        .play-button-wrapper:hover .play-button-icon {
            transform: scale(1.1);
        }
        .play-button-icon circle {
            transition: fill 0.4s ease;
        }
        
        /* Rotating text styles */
        .rotating-text {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            animation: spin 20s linear infinite;
        }
        .rotating-text text {
            font-size: 14px;
            font-weight: 300;
            letter-spacing: 2px;
            fill: #1A1A1A;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Contact Link Underline Effect */
        #contact-link:hover {
            color: var(--accent-color);
        }
        
        /* Stacking context for content */
        .content-wrapper {
            position: relative;
            z-index: 2;
        }

        .logo-accent {
            color: var(--accent-color);
            transition: color 0.4s ease;
        }
        
        @media (min-width: 640px) {
            #unmute-btn, #close-btn {
                top: 2rem;
                font-size: 0.875rem;
                padding: 1rem 2rem;
            }
            #close-btn {
                right: 2rem;
            }
        }
    </style>
</head>

<body class="antialiased">

    <!-- Custom Cursor Element -->
    <div class="custom-cursor">
        <div class="cursor-accent"></div>
    </div>

    <div class="content-wrapper">
        <!-- Navbar -->
        <nav class="fixed top-0 left-0 right-0 z-50 bg-transparent">
            <div class="container mx-auto px-6 py-4 flex items-center justify-between">
                <a href="#" class="logo text-xl font-bold tracking-wider text-gray-900">DANIEL<span class="logo-accent">SIMON</span></a>
                <a href="#contact" id="contact-link" class="text-gray-700 font-medium transition-colors duration-300">Contact</a>
            </div>
        </nav>

        <!-- Main Content Container -->
        <div class="container mx-auto px-6">
            <!-- Hero Section -->
            <section id="hero-section" class="min-h-[90vh] sm:min-h-[80vh] flex flex-col justify-center items-start text-left">
                <h1 class="scramble-text text-4xl md:text-6xl lg:text-8xl font-bold text-gray-900 leading-tight min-h-[1.2em]">
                    <!-- This text will be populated by the scramble animation -->
                </h1>
                <!-- Play Button Container for Parallax -->
                <div id="play-button-container" class="mt-8 sm:mt-12">
                    <div id="play-button" class="play-button-wrapper">
                        <div class="rotating-text">
                            <svg viewBox="0 0 120 120">
                                <path id="text-path" d="M 60, 60 m -50, 0 a 50,50 0 1,1 100,0 a 50,50 0 1,1 -100,0" fill="none"/>
                                <text text-anchor="middle">
                                    <textPath href="#text-path" startOffset="75%">SHOWREEL 2025</textPath>
                                </text>
                            </svg>
                        </div>
                        <div class="play-button-icon">
                            <svg width="80" height="80" viewBox="0 0 80 80" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="40" cy="40" r="40" fill="var(--accent-color)"/>
                                <path d="M53 40L33.5 51.2583L33.5 28.7417L53 40Z" fill="#F5F3EF"/>
                            </svg>
                        </div>
                    </div>
                </div>
            </section>
        </div>

        <!-- Showreel Overlay -->
        <div id="showreel-overlay" class="bg-black">
            <div class="video-container">
                <div id="player"></div>
            </div>
            <button id="unmute-btn" class="video-control-btn">
                <span id="unmute-text">UNMUTE</span>
            </button>
            <button id="close-btn" class="video-control-btn">
                <span>CLOSE</span>
            </button>
        </div>

        <!-- Contact Section Container -->
        <div class="container mx-auto px-6">
            <section id="contact" class="py-20 fade-in-section text-center">
                <h2 class="text-4xl sm:text-5xl md:text-7xl font-bold text-gray-900 mb-8">Let's Talk</h2>
                <p class="text-lg sm:text-xl text-gray-600 mb-4">
                    Have a project in mind? Let's get in touch.
                </p>
                <a href="mailto:simon.mograph@gmail.com" class="text-lg sm:text-xl font-bold text-gray-900 hover:text-[var(--accent-color)] transition-colors duration-300">
                    simon.mograph@gmail.com
                </a>
            </section>
        </div>


        <!-- Footer -->
        <footer class="text-center py-8 sm:py-10 border-t border-gray-200 mt-20">
            <p class="text-gray-500">&copy; 2025 DANIELSIMON. All rights reserved.</p>
        </footer>
    </div>

    <!-- YouTube IFrame Player API -->
    <script src="https://www.youtube.com/iframe_api"></script>

    <!-- JavaScript Logic -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // --- Accent Color Cycling ---
            const accentColors = ['#3A78F2', '#F23A78', '#78F23A', '#F2B83A', '#8A3AF2'];
            let currentColorIndex = 0;
            const playButtonCircle = document.querySelector('#play-button .play-button-icon svg circle');

            window.addEventListener('click', () => {
                currentColorIndex = (currentColorIndex + 1) % accentColors.length;
                const newColor = accentColors[currentColorIndex];
                document.documentElement.style.setProperty('--accent-color', newColor);
                playButtonCircle.setAttribute('fill', newColor);
            });


            // --- TextScramble Effect ---
            class TextScramble {
                constructor(el) {
                    this.el = el;
                    this.chars = '!<>-_\\/[]{}—=+*^?#________';
                    this.update = this.update.bind(this);
                }
                setText(newText) {
                    const oldText = this.el.innerText;
                    const length = Math.max(oldText.length, newText.length);
                    const promise = new Promise((resolve) => (this.resolve = resolve));
                    this.queue = [];
                    for (let i = 0; i < length; i++) {
                        const from = oldText[i] || '';
                        const to = newText[i] || '';
                        const start = Math.floor(Math.random() * 40);
                        const end = start + Math.floor(Math.random() * 40);
                        this.queue.push({ from, to, start, end });
                    }
                    cancelAnimationFrame(this.frameRequest);
                    this.frame = 0;
                    this.update();
                    return promise;
                }
                update() {
                    let output = '';
                    let complete = 0;
                    for (let i = 0, n = this.queue.length; i < n; i++) {
                        let { from, to, start, end, char } = this.queue[i];
                        if (this.frame >= end) {
                            complete++;
                            output += to;
                        } else if (this.frame >= start) {
                            if (!char || Math.random() < 0.28) {
                                char = this.randomChar();
                                this.queue[i].char = char;
                            }
                            const blurClass = Math.random() < 0.7 ? ' blurred' : '';
                            output += `<span class="dud${blurClass}">${char}</span>`;
                        } else {
                            output += from;
                        }
                    }
                    this.el.innerHTML = output;
                    if (complete === this.queue.length) {
                        this.resolve();
                    } else {
                        this.frameRequest = requestAnimationFrame(this.update);
                        this.frame++;
                    }
                }
                randomChar() {
                    return this.chars[Math.floor(Math.random() * this.chars.length)];
                }
            }
            
            // --- Scramble Animation Logic ---
            const phrases = [
                'Transforming',
                'concepts',
                'into',
                'motion.'
            ];

            const el = document.querySelector('.scramble-text');
            const fx = new TextScramble(el);

            let counter = 0;
            const next = () => {
                fx.setText(phrases[counter]).then(() => {
                    setTimeout(next, 1200); // Delay before showing the next phrase
                });
                counter = (counter + 1) % phrases.length;
            };

            next(); // Start the animation loop

            // --- Custom Cursor Microinteraction ---
            const cursor = document.querySelector('.custom-cursor');
            const hoverableElements = document.querySelectorAll('a, button, input, textarea, .play-button-wrapper');

            // Update cursor position directly on mouse move for instant tracking
            window.addEventListener('mousemove', e => {
                cursor.style.left = e.clientX + 'px';
                cursor.style.top = e.clientY + 'px';
            });

            hoverableElements.forEach(el => {
                el.addEventListener('mouseenter', () => {
                    cursor.classList.add('is-hovered');
                });
                el.addEventListener('mouseleave', () => {
                    cursor.classList.remove('is-hovered');
                });
            });


            // --- Play Button Horizontal Follow Effect ---
            const playButtonContainer = document.getElementById('play-button-container');
            const heroSection = document.getElementById('hero-section');

            heroSection.addEventListener('mousemove', (e) => {
                const heroRect = heroSection.getBoundingClientRect();
                const targetX = e.clientX - heroRect.left;
                
                // Calculate the translation needed to center the button on the cursor
                let translateX = targetX - (playButtonContainer.offsetWidth / 2);

                // Clamp the translation to keep the button within the hero section bounds
                const minTranslateX = 0;
                const maxTranslateX = heroRect.width - playButtonContainer.offsetWidth;
                translateX = Math.max(minTranslateX, Math.min(translateX, maxTranslateX));

                playButtonContainer.style.transform = `translateX(${translateX}px)`;
            });

            heroSection.addEventListener('mouseleave', () => {
                // Reset to original position
                playButtonContainer.style.transform = 'translateX(0px)';
            });


            // --- Scroll Animation Microinteraction ---
            const sections = document.querySelectorAll('.fade-in-section');
            const observer = new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                    }
                });
            }, { threshold: 0.1 });
            sections.forEach(section => observer.observe(section));

        });

        // --- YouTube Player API & Video Reveal Logic ---
        let player;
        const playButton = document.getElementById('play-button');
        const showreelOverlay = document.getElementById('showreel-overlay');
        const closeButton = document.getElementById('close-btn');
        const unmuteButton = document.getElementById('unmute-btn');
        const unmuteText = document.getElementById('unmute-text');

        // This function is called by the YouTube API script when it's ready
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                videoId: 'mTxXdZBON38', // The YouTube video ID
                playerVars: {
                    autoplay: 0, // Don't autoplay initially
                    loop: 1,
                    playlist: 'mTxXdZBON38',
                    controls: 0,
                    mute: 1,
                    playsinline: 1,
                    modestbranding: 1,
                    rel: 0
                },
                events: {
                    'onReady': onPlayerReady
                }
            });
        }

        function onPlayerReady(event) {
            // Player is ready, but we wait for click to play
        }

        function openShowreel() {
            showreelOverlay.classList.add('is-visible');
            player.unMute();
            player.playVideo();
            unmuteText.textContent = 'MUTE';
        }

        function closeShowreel() {
            showreelOverlay.classList.remove('is-visible');
            setTimeout(() => {
                player.pauseVideo();
                player.mute();
                unmuteText.textContent = 'UNMUTE';
            }, 500); // Match CSS transition duration
        }

        playButton.addEventListener('click', openShowreel);
        closeButton.addEventListener('click', closeShowreel);

        unmuteButton.addEventListener('click', () => {
            if (player.isMuted()) {
                player.unMute();
                unmuteText.textContent = 'MUTE';
            } else {
                player.mute();
                unmuteText.textContent = 'UNMUTE';
            }
        });

    </script>

</body>
</html>
